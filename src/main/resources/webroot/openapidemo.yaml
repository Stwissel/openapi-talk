---
openapi: 3.0.2
info:
  title: Toys
  version: 1.1.0
  description: Demoing the evolution of the Toy spec
  contact:
    name: The NotesSensei
    url: https://notessensei.com/
    email: stw@linux.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
paths:
  /toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      parameters:
      - name: color
        description: Limit to a color
        schema:
          type: string
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Toy'
          description: Successful response - returns an array of `Toy` entities.
      security:
      - {}
      operationId: getToys
      summary: List All Toys
      description: Gets a list of all `Toy` entities.
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
      security:
      - {}
      operationId: createToy
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /toys/{toyId}:
    summary: Path used to manage a single Toy.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Toy`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Successful response - returns a single `Toy`.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No Toy like that
      security:
      - {}
      operationId: getToy
      summary: Get a Toy
      description: Gets the details of a single instance of a `Toy`.
    put:
      requestBody:
        description: Updated `Toy` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Successful response.
      security:
      - {}
      operationId: updateToy
      summary: Update a Toy
      description: Updates an existing `Toy`.
    delete:
      responses:
        "204":
          description: Successful response.
      security:
      - {}
      operationId: deleteToy
      summary: Delete a Toy
      description: Deletes an existing `Toy`.
    parameters:
    - name: toyId
      description: A unique identifier for a `Toy`.
      schema:
        type: string
      in: path
      required: true
  /limitedcolor/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyColorSelection'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
        "400":
          $ref: '#/components/responses/Invalid400'
        "500":
          $ref: '#/components/responses/WeScrewdUp500'
      security:
      - {}
      operationId: createToyColor
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /strict/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyStrict'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
      security:
      - {}
      operationId: createActualToy
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /required/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyRequired'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
      security:
      - {}
      operationId: createToyRequired
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /secure/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyStrict'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
      security:
      - UserPassword: []
      operationId: createToySecure
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /secure2/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyStrict'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoResponse'
          description: Successful response.
      security:
      - Richelieu: []
      operationId: createToySecure2
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
  /actual/toys:
    summary: Path used to manage the list of toys.
    description: "The REST endpoint/path used to list and create zero or more `Toy`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Toy` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToyStrict'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToyStrict'
          description: Successful response.
      security:
      - {}
      operationId: createToyStrict
      summary: Create a Toy
      description: Creates a new instance of a `Toy`.
      'x-Clacks-Overhead:': GNU Terry Pratchett
components:
  schemas:
    ToyStrict:
      title: Root Type for Toy
      description: |-
        Something big and small like to play with.
        Inanimate, but eventual animatronic.
        Definitely not a pet or a human
      required:
      - Color
      - Name
      - Shape
      type: object
      properties:
        Name:
          type: string
        Color:
          type: string
        Shape:
          type: string
      additionalProperties: false
      example:
        Name: Matchbox
        Color: red
        Shape: Zylinder
    ToyRequired:
      title: Root Type for Toy
      description: |-
        Something big and small like to play with.
        Inanimate, but eventual animatronic.
        Definitely not a pet or a human
      required:
      - Name
      - Color
      - Shape
      type: object
      properties:
        Name:
          description: How will your kid call it?
          minLength: 3
          type: string
        Color:
          description: "Any color will do, even mauve "
          type: string
        Shape:
          description: "Round is a shape, as is odd"
          type: string
      additionalProperties: false
      example:
        Name: Matchbox
        Color: red
        Shape: Zylinder
    ToyColorSelection:
      title: Root Type for Toy
      description: |-
        Something big and small like to play with.
        Inanimate, but eventual animatronic.
        Definitely not a pet or a human
      required:
      - Name
      - Color
      type: object
      properties:
        Name:
          description: How will your kid call it?
          minLength: 3
          type: string
        Color:
          description: Traffic light only
          enum:
          - red
          - green
          - yellow
          type: string
        Shape:
          type: string
      additionalProperties: false
      example:
        Name: Matchbox
        Color: red
        Shape: Zylinder
    ErrorResponse:
      title: Root Type for ErrorResponse
      description: "When things go wrong, we let you know"
      type: object
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      example:
        code: 400
        message: "Try again, we know you can get it right"
    DemoResponse:
      title: Root Type for DemoResponse
      description: What we send back
      required:
      - body
      type: object
      properties:
        pathparam:
          type: object
        headers:
          type: object
        query:
          type: object
        body:
          $ref: '#/components/schemas/Toy'
          properties:
            Color:
              type: string
            Name:
              type: string
            Shape:
              type: string
      example:
        pathparam: {}
        headers: {}
        query: {}
        body:
          Color: red
          Name: ball
          Shape: round
    Toy:
      title: Root Type for Toy
      description: |-
        Something big and small like to play with.
        Inanimate, but eventual animatronic.
        Definitely not a pet or a human
      required:
      - Color
      type: object
      properties:
        Name:
          type: string
        Color:
          type: string
        Shape:
          type: string
      additionalProperties: false
      example:
        Name: Matchbox
        Color: red
        Shape: Zylinder
  responses:
    Invalid400:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: That request was s..t
    WeScrewdUp500:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: That request tanked
  securitySchemes:
    UserPassword:
      scheme: basic
      type: http
      description: The good old trusted way to get hacked
    Richelieu:
      scheme: basic
      type: http
      description: The bearer of this letter worked for king and fatherland
security:
- {}
- UserPassword: []
- Richelieu: []
- UserPassword: []
  Richelieu: []
tags:
- name: demo
  description: Endpoints just for Demo
